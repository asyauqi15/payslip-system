// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/asyauqi15/payslip-system/internal/usecase/reimbursement (interfaces: Usecase)
//
// Generated by this command:
//
//	mockgen -destination=./mock/mock_usecase.go -package=mock github.com/asyauqi15/payslip-system/internal/usecase/reimbursement Usecase
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	v1 "github.com/asyauqi15/payslip-system/pkg/openapi/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// SubmitReimbursement mocks base method.
func (m *MockUsecase) SubmitReimbursement(arg0 context.Context, arg1 v1.ReimbursementRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitReimbursement", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitReimbursement indicates an expected call of SubmitReimbursement.
func (mr *MockUsecaseMockRecorder) SubmitReimbursement(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitReimbursement", reflect.TypeOf((*MockUsecase)(nil).SubmitReimbursement), arg0, arg1)
}
