// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/asyauqi15/payslip-system/internal/usecase/attendance_period (interfaces: Usecase)
//
// Generated by this command:
//
//	mockgen -destination=./mock/mock_usecase.go -package=mock github.com/asyauqi15/payslip-system/internal/usecase/attendance_period Usecase
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/asyauqi15/payslip-system/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// CreateAttendancePeriod mocks base method.
func (m *MockUsecase) CreateAttendancePeriod(arg0 context.Context, arg1, arg2 time.Time) (*entity.AttendancePeriod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttendancePeriod", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.AttendancePeriod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAttendancePeriod indicates an expected call of CreateAttendancePeriod.
func (mr *MockUsecaseMockRecorder) CreateAttendancePeriod(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttendancePeriod", reflect.TypeOf((*MockUsecase)(nil).CreateAttendancePeriod), arg0, arg1, arg2)
}
