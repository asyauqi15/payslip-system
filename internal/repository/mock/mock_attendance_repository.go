// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/asyauqi15/payslip-system/internal/repository (interfaces: AttendanceRepository)
//
// Generated by this command:
//
//	mockgen -destination=./mock/mock_attendance_repository.go -package=mock github.com/asyauqi15/payslip-system/internal/repository AttendanceRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/asyauqi15/payslip-system/internal/entity"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockAttendanceRepository is a mock of AttendanceRepository interface.
type MockAttendanceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAttendanceRepositoryMockRecorder
}

// MockAttendanceRepositoryMockRecorder is the mock recorder for MockAttendanceRepository.
type MockAttendanceRepositoryMockRecorder struct {
	mock *MockAttendanceRepository
}

// NewMockAttendanceRepository creates a new mock instance.
func NewMockAttendanceRepository(ctrl *gomock.Controller) *MockAttendanceRepository {
	mock := &MockAttendanceRepository{ctrl: ctrl}
	mock.recorder = &MockAttendanceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttendanceRepository) EXPECT() *MockAttendanceRepositoryMockRecorder {
	return m.recorder
}

// CountAttendanceInPeriod mocks base method.
func (m *MockAttendanceRepository) CountAttendanceInPeriod(arg0 context.Context, arg1 int64, arg2, arg3 time.Time, arg4 *gorm.DB) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAttendanceInPeriod", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAttendanceInPeriod indicates an expected call of CountAttendanceInPeriod.
func (mr *MockAttendanceRepositoryMockRecorder) CountAttendanceInPeriod(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAttendanceInPeriod", reflect.TypeOf((*MockAttendanceRepository)(nil).CountAttendanceInPeriod), arg0, arg1, arg2, arg3, arg4)
}

// Create mocks base method.
func (m *MockAttendanceRepository) Create(arg0 context.Context, arg1 *entity.Attendance, arg2 *gorm.DB) (*entity.Attendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.Attendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAttendanceRepositoryMockRecorder) Create(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAttendanceRepository)(nil).Create), arg0, arg1, arg2)
}

// FindByID mocks base method.
func (m *MockAttendanceRepository) FindByID(arg0 context.Context, arg1 uint, arg2 *gorm.DB) (*entity.Attendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.Attendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockAttendanceRepositoryMockRecorder) FindByID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockAttendanceRepository)(nil).FindByID), arg0, arg1, arg2)
}

// FindByTemplate mocks base method.
func (m *MockAttendanceRepository) FindByTemplate(arg0 context.Context, arg1 *entity.Attendance, arg2 *gorm.DB) ([]entity.Attendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTemplate", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entity.Attendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTemplate indicates an expected call of FindByTemplate.
func (mr *MockAttendanceRepositoryMockRecorder) FindByTemplate(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTemplate", reflect.TypeOf((*MockAttendanceRepository)(nil).FindByTemplate), arg0, arg1, arg2)
}

// FindOneByTemplate mocks base method.
func (m *MockAttendanceRepository) FindOneByTemplate(arg0 context.Context, arg1 *entity.Attendance, arg2 *gorm.DB) (*entity.Attendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByTemplate", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.Attendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByTemplate indicates an expected call of FindOneByTemplate.
func (mr *MockAttendanceRepositoryMockRecorder) FindOneByTemplate(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByTemplate", reflect.TypeOf((*MockAttendanceRepository)(nil).FindOneByTemplate), arg0, arg1, arg2)
}

// Save mocks base method.
func (m *MockAttendanceRepository) Save(arg0 context.Context, arg1 *entity.Attendance, arg2 *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockAttendanceRepositoryMockRecorder) Save(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAttendanceRepository)(nil).Save), arg0, arg1, arg2)
}

// Updates mocks base method.
func (m *MockAttendanceRepository) Updates(arg0 context.Context, arg1 *entity.Attendance, arg2 entity.Attendance, arg3 *gorm.DB) (*entity.Attendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Updates", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*entity.Attendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Updates indicates an expected call of Updates.
func (mr *MockAttendanceRepositoryMockRecorder) Updates(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updates", reflect.TypeOf((*MockAttendanceRepository)(nil).Updates), arg0, arg1, arg2, arg3)
}
