// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/asyauqi15/payslip-system/internal/repository (interfaces: AttendancePeriodRepository)
//
// Generated by this command:
//
//	mockgen -destination=./mock/mock_attendance_period_repository.go -package=mock github.com/asyauqi15/payslip-system/internal/repository AttendancePeriodRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/asyauqi15/payslip-system/internal/entity"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockAttendancePeriodRepository is a mock of AttendancePeriodRepository interface.
type MockAttendancePeriodRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAttendancePeriodRepositoryMockRecorder
	isgomock struct{}
}

// MockAttendancePeriodRepositoryMockRecorder is the mock recorder for MockAttendancePeriodRepository.
type MockAttendancePeriodRepositoryMockRecorder struct {
	mock *MockAttendancePeriodRepository
}

// NewMockAttendancePeriodRepository creates a new mock instance.
func NewMockAttendancePeriodRepository(ctrl *gomock.Controller) *MockAttendancePeriodRepository {
	mock := &MockAttendancePeriodRepository{ctrl: ctrl}
	mock.recorder = &MockAttendancePeriodRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttendancePeriodRepository) EXPECT() *MockAttendancePeriodRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAttendancePeriodRepository) Create(ctx context.Context, o *entity.AttendancePeriod, tx *gorm.DB) (*entity.AttendancePeriod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, o, tx)
	ret0, _ := ret[0].(*entity.AttendancePeriod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAttendancePeriodRepositoryMockRecorder) Create(ctx, o, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAttendancePeriodRepository)(nil).Create), ctx, o, tx)
}

// FindByID mocks base method.
func (m *MockAttendancePeriodRepository) FindByID(ctx context.Context, i uint, tx *gorm.DB) (*entity.AttendancePeriod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, i, tx)
	ret0, _ := ret[0].(*entity.AttendancePeriod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockAttendancePeriodRepositoryMockRecorder) FindByID(ctx, i, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockAttendancePeriodRepository)(nil).FindByID), ctx, i, tx)
}

// FindByTemplate mocks base method.
func (m *MockAttendancePeriodRepository) FindByTemplate(ctx context.Context, t *entity.AttendancePeriod, tx *gorm.DB) ([]entity.AttendancePeriod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTemplate", ctx, t, tx)
	ret0, _ := ret[0].([]entity.AttendancePeriod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTemplate indicates an expected call of FindByTemplate.
func (mr *MockAttendancePeriodRepositoryMockRecorder) FindByTemplate(ctx, t, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTemplate", reflect.TypeOf((*MockAttendancePeriodRepository)(nil).FindByTemplate), ctx, t, tx)
}

// FindOneByTemplate mocks base method.
func (m *MockAttendancePeriodRepository) FindOneByTemplate(ctx context.Context, o *entity.AttendancePeriod, tx *gorm.DB) (*entity.AttendancePeriod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByTemplate", ctx, o, tx)
	ret0, _ := ret[0].(*entity.AttendancePeriod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByTemplate indicates an expected call of FindOneByTemplate.
func (mr *MockAttendancePeriodRepositoryMockRecorder) FindOneByTemplate(ctx, o, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByTemplate", reflect.TypeOf((*MockAttendancePeriodRepository)(nil).FindOneByTemplate), ctx, o, tx)
}

// Save mocks base method.
func (m *MockAttendancePeriodRepository) Save(ctx context.Context, o *entity.AttendancePeriod, tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, o, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockAttendancePeriodRepositoryMockRecorder) Save(ctx, o, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAttendancePeriodRepository)(nil).Save), ctx, o, tx)
}

// Updates mocks base method.
func (m *MockAttendancePeriodRepository) Updates(ctx context.Context, o *entity.AttendancePeriod, u entity.AttendancePeriod, tx *gorm.DB) (*entity.AttendancePeriod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Updates", ctx, o, u, tx)
	ret0, _ := ret[0].(*entity.AttendancePeriod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Updates indicates an expected call of Updates.
func (mr *MockAttendancePeriodRepositoryMockRecorder) Updates(ctx, o, u, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updates", reflect.TypeOf((*MockAttendancePeriodRepository)(nil).Updates), ctx, o, u, tx)
}
