// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for AuthResponseUserRole.
const (
	Admin    AuthResponseUserRole = "admin"
	Employee AuthResponseUserRole = "employee"
)

// Defines values for PostEmployeeAttendanceJSONBodyAttendanceType.
const (
	CheckIn  PostEmployeeAttendanceJSONBodyAttendanceType = "check_in"
	CheckOut PostEmployeeAttendanceJSONBodyAttendanceType = "check_out"
)

// AttendancePeriodRequest defines model for AttendancePeriodRequest.
type AttendancePeriodRequest struct {
	EndDate   openapi_types.Date `json:"end_date"`
	StartDate openapi_types.Date `json:"start_date"`
}

// AuthRequest defines model for AuthRequest.
type AuthRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	Token *string `json:"token,omitempty"`
	User  *struct {
		Id       *openapi_types.UUID   `json:"id,omitempty"`
		Role     *AuthResponseUserRole `json:"role,omitempty"`
		Username *string               `json:"username,omitempty"`
	} `json:"user,omitempty"`
}

// AuthResponseUserRole defines model for AuthResponse.User.Role.
type AuthResponseUserRole string

// DefaultErrorResponse defines model for DefaultErrorResponse.
type DefaultErrorResponse struct {
	Error struct {
		Message string `json:"message"`
	} `json:"error"`
}

// OvertimeRequest defines model for OvertimeRequest.
type OvertimeRequest struct {
	Date      openapi_types.Date `json:"date"`
	EndTime   time.Time          `json:"end_time"`
	StartTime time.Time          `json:"start_time"`
}

// PayslipResponse defines model for PayslipResponse.
type PayslipResponse struct {
	BaseSalary      *int    `json:"base_salary,omitempty"`
	OvertimePayment *int    `json:"overtime_payment,omitempty"`
	PayrollId       *string `json:"payroll_id,omitempty"`
	ProratedSalary  *int    `json:"prorated_salary,omitempty"`
	Reimbursements  *[]struct {
		Amount      *int    `json:"amount,omitempty"`
		Date        *string `json:"date,omitempty"`
		Description *string `json:"description,omitempty"`
	} `json:"reimbursements,omitempty"`
	TotalTakeHome *int `json:"total_take_home,omitempty"`
}

// ReimbursementRequest defines model for ReimbursementRequest.
type ReimbursementRequest struct {
	Amount      int                `json:"amount"`
	Date        openapi_types.Date `json:"date"`
	Description string             `json:"description"`
}

// PostAdminPayrollsJSONBody defines parameters for PostAdminPayrolls.
type PostAdminPayrollsJSONBody struct {
	AttendancePeriodId openapi_types.UUID `json:"attendance_period_id"`
}

// GetAdminPayslipsSummaryParams defines parameters for GetAdminPayslipsSummary.
type GetAdminPayslipsSummaryParams struct {
	PayrollId string `form:"payroll_id" json:"payroll_id"`
}

// PostEmployeeAttendanceJSONBody defines parameters for PostEmployeeAttendance.
type PostEmployeeAttendanceJSONBody struct {
	AttendanceType PostEmployeeAttendanceJSONBodyAttendanceType `json:"attendance_type"`
}

// PostEmployeeAttendanceJSONBodyAttendanceType defines parameters for PostEmployeeAttendance.
type PostEmployeeAttendanceJSONBodyAttendanceType string

// GetEmployeePayslipParams defines parameters for GetEmployeePayslip.
type GetEmployeePayslipParams struct {
	PayrollId string `form:"payroll_id" json:"payroll_id"`
}

// PostAdminAttendancePeriodsJSONRequestBody defines body for PostAdminAttendancePeriods for application/json ContentType.
type PostAdminAttendancePeriodsJSONRequestBody = AttendancePeriodRequest

// PostAdminPayrollsJSONRequestBody defines body for PostAdminPayrolls for application/json ContentType.
type PostAdminPayrollsJSONRequestBody PostAdminPayrollsJSONBody

// PostAuthLoginJSONRequestBody defines body for PostAuthLogin for application/json ContentType.
type PostAuthLoginJSONRequestBody = AuthRequest

// PostEmployeeAttendanceJSONRequestBody defines body for PostEmployeeAttendance for application/json ContentType.
type PostEmployeeAttendanceJSONRequestBody PostEmployeeAttendanceJSONBody

// PostEmployeeOvertimeJSONRequestBody defines body for PostEmployeeOvertime for application/json ContentType.
type PostEmployeeOvertimeJSONRequestBody = OvertimeRequest

// PostEmployeeReimbursementJSONRequestBody defines body for PostEmployeeReimbursement for application/json ContentType.
type PostEmployeeReimbursementJSONRequestBody = ReimbursementRequest

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xX32/bNhD+Vwhuj2rsri+F39KtKzoMWJAM2ENgGIx0ttlIpHI8phAC/+8DSf0WlSju",
	"AuzNFo/Hu/u+u4984qkuSq1AkeGbJ27SIxTC/7wkApUJlcIVoNTZNTxYMOSWStQlIEnwhqCyXSYI3O+9",
	"xkIQ33D/IeFUlcA33BBKdeCnhBsSSEvNTwlHeLASIeOb2/7epDt1227Td98gJXfKpaXjbLylMOa7xsz9",
	"nsRnDaASBUQWR9G0lknncT4WU2plYBoM6XtQs5FM7WU2qJu1MouVGXUOARtbuGBFVkjlqlaUua6gX7Wl",
	"uY8SO0VS/Q32wub0GVHjfMrglqefCzBGHBYUvjHcxmLqG4aDYpj89ejOLWCWI4v57GjoPE2M3/mvsx3w",
	"mj2jtOpQen56YcSyvRKVyWU5j8idMLAzIhdY9covFcEB0HnQdb12pagKUBS3KkWFOs93Mt5aJWoUBNmz",
	"JyHI4s6igaIZSZKgMNOYRaHtXCANepMQMjApypKkVotI3n4QiKLy/zWJfEfiHnZHPWiV9vyYm+t+WrOs",
	"W5LTi4x8MccIl+qDh5uj/WUgtSipunFCEaL+BAIB3ZjzXPL/fm+i/OOfvx1XvTXf1Ktd2Eeikp+cY6n2",
	"2ndeP3x+efWV7TUyk4pc3OXAysBldgAFKJwV+y7pyESrVglr2JowoTI2YJQ7WZKbjU1XsMurrzzhj4Am",
	"HPn+Yn2x9qQvQYlS8g3/cLG++ODnPB19yis/T1fdoe9Kr5GBpzpg65D1EX7N3HHa0KXbNdZVwwMkYOiT",
	"znxbpFpR3WWiLHOZejerbyZAGkTa/foZYc83/KdVp+KrWsJXc/p9GnKA0IL/EIaDz+CX9fspFL8iuO4d",
	"sIBvbof4325P24QbWxS+w+tNPXRYKJTDQRxMJ01b57Yuaz1HlhTzqjE9v4ajFmwj3YVId4sUd9RWUS+R",
	"flqAxHqKRJ100wOvxeTaKlaX2PeWYAf5CGohMq5nzKr19sQPEAHoC7T4+A03tb3rIRQFEKDxgUqX0IMF",
	"vxYuH30dGdcn6QE3hmAbr92ZRGhuSs9pUGMzp3gLxOKVt66pIL0guiGEUlTa0jKxOo01hNfgncu3L0Cs",
	"/sf0nok8b6a4YbKl4hzvLB1XuT5I9cI0sHT805u90TTtvSiW9+1/eHR9d4vA49NmxqYpGBOgaWsf1oRh",
	"DVWZa/j6MdDW28EWyt2Y9aTt+bp/rjd0avMWozhQtHvOpEdI73c+ifDTsXv7iqnsDc8byBFp7JJnxt4V",
	"kl7dIzd+W18n3WROLSIoYpmoenB1b7ghZM21ZxlgzRPojfpl/MI6t7SNnx8srO6yfamM9Wx6TtqaGtbq",
	"9r9WtedAGj8MI8OluSUjEEp4PGf2N1f2wV1jMvTn4Bhe3xdR+3p0438LfkcfdOeSfODsB5k+ee5E6uvd",
	"4mPD1rGcpCJnYZ0n3GJev9M2q1Xu1o7a0Obj+uOan7anfwMAAP//+axAFkEUAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
